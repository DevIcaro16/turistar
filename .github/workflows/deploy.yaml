name: Build and Deploy to EC2

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging

env:
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
  REPOSITORY_NAME: turistar
  VERSION: ${{ github.sha }}

jobs:
  build:
    name: Build and Push das imagens Docker
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Make build script executable
        run: chmod +x scripts/build_and_push_images.sh

      - name: atualiza o script com as credenciais do docker hub
        run: |
          sed -i "s/seu-username/${{ secrets.DOCKER_HUB_USERNAME }}/g" scripts/build_and_push_images.sh
          sed -i "s/latest/${{ github.sha }}/g" scripts/build_and_push_images.sh

      - name: Build and push backend image
        run: |
          docker build -f backend-api.Dockerfile \
            -t ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.REPOSITORY_NAME }}-backend-api:${{ env.VERSION }} \
            -t ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.REPOSITORY_NAME }}-backend-api:latest \
            .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.REPOSITORY_NAME }}-backend-api:${{ env.VERSION }}
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.REPOSITORY_NAME }}-backend-api:latest

      - name: Build and push frontend image
        run: |
          docker build -f frontend.Dockerfile \
            -t ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.REPOSITORY_NAME }}-frontend:${{ env.VERSION }} \
            -t ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.REPOSITORY_NAME }}-frontend:latest \
            .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.REPOSITORY_NAME }}-frontend:${{ env.VERSION }}
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.REPOSITORY_NAME }}-frontend:latest

      - name: Create deployment info
        run: |
          echo "BACKEND_IMAGE=${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.REPOSITORY_NAME }}-backend-api:${{ env.VERSION }}" >> $GITHUB_ENV
          echo "FRONTEND_IMAGE=${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.REPOSITORY_NAME }}-frontend:${{ env.VERSION }}" >> $GITHUB_ENV
          echo "DEPLOYMENT_TIME=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-info
          path: |
            .github/workflows/deploy-ec2.sh
            docker-compose.prod.yml
          retention-days: 30

  deploy:
    name: Deploy na EC2
    runs-on: self-hosted
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'

    environment: ${{ github.event.inputs.environment || 'production' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker (User e Grupo)
        run: |
          sudo systemctl start docker
          sudo usermod -aG docker $USER

      - name: Criando .env
        run: |
          cat > .env << EOF
          # Configurações do Banco de Dados
          DATABASE_URL=${{ secrets.DATABASE_URL }}

          # Configurações JWT
          ACCESS_TOKEN_SECRET=${{ secrets.ACCESS_TOKEN_SECRET }}
          REFRESH_TOKEN_SECRET=${{ secrets.REFRESH_TOKEN_SECRET }}

          # Configurações Cloudinary
          CLOUDINARY_NAME=${{ secrets.CLOUDINARY_NAME }}
          CLOUDINARY_KEY=${{ secrets.CLOUDINARY_KEY }}
          CLOUDINARY_SECRET=${{ secrets.CLOUDINARY_SECRET }}

          # Configurações Stripe
          STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}

          # Configurações Redis
          REDIS_URL=${{ secrets.REDIS_URL }}
          REDIS_HOST=${{ secrets.REDIS_HOST }}
          REDIS_PORT=${{ secrets.REDIS_PORT }}
          REDIS_PASS=${{ secrets.REDIS_PASS }}

          # Configurações SMTP
          SMTP_HOST=${{ secrets.SMTP_HOST }}
          SMTP_PORT=${{ secrets.SMTP_PORT }}
          SMTP_SERVICE=${{ secrets.SMTP_SERVICE }}
          SMTP_USER=${{ secrets.SMTP_USER }}
          SMTP_PASS=${{ secrets.SMTP_PASS }}

          # Configurações para EC2/AWS
          EC2_PUBLIC_IP=${{ secrets.EC2_PUBLIC_IP }}
          FRONTEND_URL=${{ secrets.FRONTEND_URL }}
          DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}

          # Configurações do Frontend
          NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}

          # Configurações do Servidor
          HOST=0.0.0.0
          PORT=8000
          NODE_ENV=production
          EOF

      - name: Create production docker-compose
        run: |
          cat > docker-compose.prod.yml << EOF
          version: '3.8'

          services:
            # Backend API
            backend-api:
              image: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.REPOSITORY_NAME }}-backend-api:${{ env.VERSION }}
              container_name: turistar-backend-api
              ports:
                - "8000:8000"
              environment:
                - NODE_ENV=production
                - DATABASE_URL=\${DATABASE_URL}
                - ACCESS_TOKEN_SECRET=\${ACCESS_TOKEN_SECRET}
                - REFRESH_TOKEN_SECRET=\${REFRESH_TOKEN_SECRET}
                - CLOUDINARY_NAME=\${CLOUDINARY_NAME}
                - CLOUDINARY_KEY=\${CLOUDINARY_KEY}
                - CLOUDINARY_SECRET=\${CLOUDINARY_SECRET}
                - STRIPE_SECRET_KEY=\${STRIPE_SECRET_KEY}
                - REDIS_URL=\${REDIS_URL}
                - REDIS_HOST=\${REDIS_HOST}
                - REDIS_PORT=\${REDIS_PORT}
                - REDIS_PASS=\${REDIS_PASS}
                - SMTP_HOST=\${SMTP_HOST}
                - SMTP_PORT=\${SMTP_PORT}
                - SMTP_SERVICE=\${SMTP_SERVICE}
                - SMTP_USER=\${SMTP_USER}
                - SMTP_PASS=\${SMTP_PASS}
                - FRONTEND_URL=\${FRONTEND_URL}
                - EC2_PUBLIC_IP=\${EC2_PUBLIC_IP}
                - DOMAIN_NAME=\${DOMAIN_NAME}
                - HOST=0.0.0.0
                - PORT=8000
              restart: unless-stopped
              networks:
                - turistar-network
              
            # Frontend Next.js
            frontend:
              image: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.REPOSITORY_NAME }}-frontend:${{ env.VERSION }}
              container_name: turistar-frontend
              ports:
                - "3000:3000"
              environment:
                - NODE_ENV=production
                - NEXT_PUBLIC_API_URL=\${NEXT_PUBLIC_API_URL}
              depends_on:
                - backend-api
              restart: unless-stopped
              networks:
                - turistar-network

          networks:
            turistar-network:
              driver: bridge
          EOF

      - name: Stop and remove existing containers
        run: |
          # Stop and remove containers
          docker-compose -f docker-compose.prod.yml down || true
          docker stop $(docker ps -q) || true
          docker rm $(docker ps -aq) || true

      - name: Remove existing images
        run: |
          # Remove all images to ensure clean state
          docker rmi $(docker images -q) || true
          docker system prune -a -f

      - name: Pull new images
        run: |
          # Pull the new images
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.REPOSITORY_NAME }}-backend-api:${{ env.VERSION }}
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.REPOSITORY_NAME }}-frontend:${{ env.VERSION }}

      - name: Update Swagger host
        run: |
          chmod +x scripts/update-swagger-host.sh
          export EC2_PUBLIC_IP=${{ secrets.EC2_PUBLIC_IP }}
          export DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}
          export PORT=8000
          ./scripts/update-swagger-host.sh

      - name: Deploy das aplicações com compose
        run: |
          docker-compose -f docker-compose.prod.yml up -d

      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to be ready..."
          sleep 30

          # Check if services are running
          docker-compose -f docker-compose.prod.yml ps

          # Show logs for debugging
          echo "=== Backend logs ==="
          docker logs turistar-backend-api --tail 20 || true
          echo "=== Frontend logs ==="
          docker logs turistar-frontend --tail 20 || true

          # Health check with retry
          echo "Performing health checks..."
          for i in {1..5}; do
            echo "Attempt $i of 5"
            if curl -f http://localhost:8000/ && curl -f http://localhost:3000/; then
              echo "Health checks passed!"
              break
            else
              echo "Health checks failed, waiting 10 seconds..."
              sleep 10
            fi
          done

          # Final health check
          curl -f http://localhost:8000/ || (echo "Backend health check failed" && exit 1)
          curl -f http://localhost:3000/ || (echo "Frontend health check failed" && exit 1)

      - name: Cleanup old images and containers
        run: |
          # Remove all stopped containers
          docker container prune -f

          # Remove all unused images
          docker image prune -a -f

          # Remove all unused networks
          docker network prune -f

          # Remove all unused volumes
          docker volume prune -f

          # Full system cleanup
          docker system prune -a -f

      - name: Send deployment notification
        run: |
          echo "Deploy finalizado com Sucesso!!"
          echo "Backend: http://${{ secrets.EC2_PUBLIC_IP }}:8000"
          echo "Frontend: http://${{ secrets.EC2_PUBLIC_IP }}:3000"
          echo "Version: ${{ env.VERSION }}"
          echo "Deployed at: ${{ env.DEPLOYMENT_TIME }}"

      - name: Create deployment summary
        run: |
          cat > deployment-summary.md << EOF
          # Deployment Summary

          ## Deployment Information
          - **Version**: ${{ env.VERSION }}
          - **Deployed at**: ${{ env.DEPLOYMENT_TIME }}
          - **Environment**: ${{ github.event.inputs.environment || 'production' }}

          ## Services
          - **Backend API**: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.REPOSITORY_NAME }}-backend-api:${{ env.VERSION }}
          - **Frontend**: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.REPOSITORY_NAME }}-frontend:${{ env.VERSION }}

          ## URLs
          - **Backend**: http://${{ secrets.EC2_PUBLIC_IP }}:8000
          - **Frontend**: http://${{ secrets.EC2_PUBLIC_IP }}:3000
          - **API Docs**: http://${{ secrets.EC2_PUBLIC_IP }}:8000/api-docs

          ## Health Check
          - Backend: Running
          - Frontend: Running
          EOF

      - name: Upload deployment summary
        uses: actions/upload-artifact@v4
        with:
          name: deployment-summary
          path: deployment-summary.md
          retention-days: 30
